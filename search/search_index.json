{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Popochiu is a Godot addon that allows you to create point-and-click adventure games. It's inspired by Adventure Game Studio and PowerQuest Unity plugin. Features Works with Godot 3 and 4 (new development will happen for 4 only). Designed to offer a fast and easy-to-use workflow like Adventure Game Studio and PowerQuest. Provides a Godot Editor plugin, as well as the adventure game engine, specifically designed for adventure games. A powerful yet simple scripting API gives total control on characters, objects, inventory items, dialogues, etc. Autocomplete for scripting functions in Godot scripting editor. Suitable for high-resolution as well as retro-styled, classic games. Blends easily with Godot, allowing experienced devs to customize and extending the functions with ease. Easy management of animations, interactions, audio, game state, saves and load, and other commong game features. Additional tools for advanced workflows, like animation importers and the like. Very permissive license . Is Popochiu for me? Popochiu is for everyone, but it's particularly suitable for you if you : are in search for a developer-friendly engine, with a powerful scripting language want to work on top of a state-of-the-art, general-purpose game engine with a great community and support (Godot) want to build your game on OS different than Windows (Linux or MacOSX) want to release your game on different platforms (PC, mobile and consoles) love Free/Open-Source Software want to join a cheerful and welcoming community of fellow developers Popochiu may not be your cup of tea if : you are no coder and search for a visual editor like Adventure Creator you want to build games different from point-and-click adventures Yes, that's it. We can't imagine for what other reasons you shouldn't at least give Popochiu a try! :) Made with Popochiu The Maid Butcher Ritual by Skarmuse (Made for the G lobal G ame J am 2023) Popochius Little Adventure (AdvJam 2022) (in-development) | source code here Buggy Adventure (in-development) | source code here Pato & Lobo | source code here People Popochiu was created by Mateo @carenalga Robayo Rodr\u00edguez , who is the project's main maintainer and benevolent dictator. It is now co-maintained by Paolo @stickgrinder Pustorino and Whyshchuck with contributions by our wonderful community members. License Popochiu is released under the very permissive MIT License , suitable for free and commercial projects, no strings attached.","title":"Home"},{"location":"#features","text":"Works with Godot 3 and 4 (new development will happen for 4 only). Designed to offer a fast and easy-to-use workflow like Adventure Game Studio and PowerQuest. Provides a Godot Editor plugin, as well as the adventure game engine, specifically designed for adventure games. A powerful yet simple scripting API gives total control on characters, objects, inventory items, dialogues, etc. Autocomplete for scripting functions in Godot scripting editor. Suitable for high-resolution as well as retro-styled, classic games. Blends easily with Godot, allowing experienced devs to customize and extending the functions with ease. Easy management of animations, interactions, audio, game state, saves and load, and other commong game features. Additional tools for advanced workflows, like animation importers and the like. Very permissive license .","title":"Features"},{"location":"#is-popochiu-for-me","text":"Popochiu is for everyone, but it's particularly suitable for you if you : are in search for a developer-friendly engine, with a powerful scripting language want to work on top of a state-of-the-art, general-purpose game engine with a great community and support (Godot) want to build your game on OS different than Windows (Linux or MacOSX) want to release your game on different platforms (PC, mobile and consoles) love Free/Open-Source Software want to join a cheerful and welcoming community of fellow developers Popochiu may not be your cup of tea if : you are no coder and search for a visual editor like Adventure Creator you want to build games different from point-and-click adventures Yes, that's it. We can't imagine for what other reasons you shouldn't at least give Popochiu a try! :)","title":"Is Popochiu for me?"},{"location":"#made-with-popochiu","text":"The Maid Butcher Ritual by Skarmuse (Made for the G lobal G ame J am 2023) Popochius Little Adventure (AdvJam 2022) (in-development) | source code here Buggy Adventure (in-development) | source code here Pato & Lobo | source code here","title":"Made with Popochiu"},{"location":"#people","text":"Popochiu was created by Mateo @carenalga Robayo Rodr\u00edguez , who is the project's main maintainer and benevolent dictator. It is now co-maintained by Paolo @stickgrinder Pustorino and Whyshchuck with contributions by our wonderful community members.","title":"People"},{"location":"#license","text":"Popochiu is released under the very permissive MIT License , suitable for free and commercial projects, no strings attached.","title":"License"},{"location":"advanced-techniques/","text":"","title":"Index"},{"location":"advanced-techniques/advanced-animations/","text":"Animation prefixes TODO Triggering events from animations TODO","title":"Advanced animations"},{"location":"advanced-techniques/advanced-animations/#animation-prefixes","text":"TODO","title":"Animation prefixes"},{"location":"advanced-techniques/advanced-animations/#triggering-events-from-animations","text":"TODO","title":"Triggering events from animations"},{"location":"advanced-techniques/extending-customizing-popochiu/","text":"TODO","title":"Extending customizing popochiu"},{"location":"advanced-techniques/game-state-saving-loading/","text":"TODO","title":"Game state saving loading"},{"location":"advanced-techniques/guis/","text":"Theming your GUI TODO Creating Custom GUI TODO","title":"Guis"},{"location":"advanced-techniques/guis/#theming-your-gui","text":"TODO","title":"Theming your GUI"},{"location":"advanced-techniques/guis/#creating-custom-gui","text":"TODO","title":"Creating Custom GUI"},{"location":"advanced-techniques/localization/","text":"TODO","title":"Localization"},{"location":"contributing-to-popochiu/","text":"","title":"Index"},{"location":"contributing-to-popochiu/coding-standards/","text":"Commit format TODO Coding standards TODO","title":"Coding standards"},{"location":"contributing-to-popochiu/coding-standards/#commit-format","text":"TODO","title":"Commit format"},{"location":"contributing-to-popochiu/coding-standards/#coding-standards","text":"TODO","title":"Coding standards"},{"location":"contributing-to-popochiu/getting-help/","text":"How to contact maintainers TODO Channels TODO Other policies TODO","title":"Getting help"},{"location":"contributing-to-popochiu/getting-help/#how-to-contact-maintainers","text":"TODO","title":"How to contact maintainers"},{"location":"contributing-to-popochiu/getting-help/#channels","text":"TODO","title":"Channels"},{"location":"contributing-to-popochiu/getting-help/#other-policies","text":"TODO","title":"Other policies"},{"location":"contributing-to-popochiu/project-management/","text":"Issue tracking TODO Code reviews TODO Branching model TODO Definition of Done TODO","title":"Project management"},{"location":"contributing-to-popochiu/project-management/#issue-tracking","text":"TODO","title":"Issue tracking"},{"location":"contributing-to-popochiu/project-management/#code-reviews","text":"TODO","title":"Code reviews"},{"location":"contributing-to-popochiu/project-management/#branching-model","text":"TODO","title":"Branching model"},{"location":"contributing-to-popochiu/project-management/#definition-of-done","text":"TODO","title":"Definition of Done"},{"location":"contributing-to-popochiu/project-overview/","text":"Popochiu Subsystems TODO Editor Plugin TODO Game Engine TODO","title":"Project overview"},{"location":"contributing-to-popochiu/project-overview/#popochiu-subsystems","text":"TODO","title":"Popochiu Subsystems"},{"location":"contributing-to-popochiu/project-overview/#editor-plugin","text":"TODO","title":"Editor Plugin"},{"location":"contributing-to-popochiu/project-overview/#game-engine","text":"TODO","title":"Game Engine"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/","text":"Documentation TODO Plugin and Engine TODO","title":"Toolchain and dependencies"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/#documentation","text":"TODO","title":"Documentation"},{"location":"contributing-to-popochiu/toolchain-and-dependencies/#plugin-and-engine","text":"TODO","title":"Plugin and Engine"},{"location":"getting-started/","text":"","title":"Index"},{"location":"getting-started/creating-a-game-stub/","text":"This page will guide you through the process of creating a very small stub for a game. The purpose of this page is to quickly get you set up to experiment and tinker as you read this documentation. If you are already familiar with Popochiu or have already created your project, you can skip to the Tutorials section. Example resources If you are experimenting with Popochiu for the first time, or still evaluating if it's for you, you can speed up the following step, downloading the Example Game Assets . If you prefer to skip the steps and jump to the meat of the learning, you can just clone the Example Game . It's a project containing the game setup and assets, plus a working version of Popochiu. If you want to learn the basics of setting up your very project, follow along. Setup the game Set resolution TODO Select game GUI TODO Create characters TODO Create the main character TODO Create a secondary character TODO Create the first room TODO Add an interactive prop TODO Script your first interaction TODO That's it","title":"Creating a game stub"},{"location":"getting-started/creating-a-game-stub/#example-resources","text":"If you are experimenting with Popochiu for the first time, or still evaluating if it's for you, you can speed up the following step, downloading the Example Game Assets . If you prefer to skip the steps and jump to the meat of the learning, you can just clone the Example Game . It's a project containing the game setup and assets, plus a working version of Popochiu. If you want to learn the basics of setting up your very project, follow along.","title":"Example resources"},{"location":"getting-started/creating-a-game-stub/#setup-the-game","text":"","title":"Setup the game"},{"location":"getting-started/creating-a-game-stub/#set-resolution","text":"TODO","title":"Set resolution"},{"location":"getting-started/creating-a-game-stub/#select-game-gui","text":"TODO","title":"Select game GUI"},{"location":"getting-started/creating-a-game-stub/#create-characters","text":"TODO","title":"Create characters"},{"location":"getting-started/creating-a-game-stub/#create-the-main-character","text":"TODO","title":"Create the main character"},{"location":"getting-started/creating-a-game-stub/#create-a-secondary-character","text":"TODO","title":"Create a secondary character"},{"location":"getting-started/creating-a-game-stub/#create-the-first-room","text":"TODO","title":"Create the first room"},{"location":"getting-started/creating-a-game-stub/#add-an-interactive-prop","text":"TODO","title":"Add an interactive prop"},{"location":"getting-started/creating-a-game-stub/#script-your-first-interaction","text":"TODO That's it","title":"Script your first interaction"},{"location":"getting-started/example-resources/","text":"Everything you need to start creating your adventure game with Popochiu, beside the addon, is a good idea, assets and the game script. When working on a new project, Popochiu will set the project up for you but other than that, it will provide you with a blank slate so that you don't need to clean the stage from unwanted stuff. If you are testing or learning the engine, or if you suffer from blank canvas syndrome, don't worry. We've got you covered! Example game TODO Explain a game repository is available (which version?) Provide a link to the repository and brief instructions on how to use it Example assets TODO Explain a set of assets (same ones used in the Example game) is available Provide a link to a zip file","title":"Example resources"},{"location":"getting-started/example-resources/#example-game","text":"TODO Explain a game repository is available (which version?) Provide a link to the repository and brief instructions on how to use it","title":"Example game"},{"location":"getting-started/example-resources/#example-assets","text":"TODO Explain a set of assets (same ones used in the Example game) is available Provide a link to a zip file","title":"Example assets"},{"location":"getting-started/getting-help/","text":"Join our community We do our best to keep this documentation relevant and up to date, but we know that there are nuances and needs that will go beyond what we can provide. That's where our community kicks in. TODO: insert link and explanation about the discord server. TODO: explain how to provide help in the community GitHub If you found a bug or if you want to propose an improvement, GitHub is the place to head to. TODO: explain how we approach issues, the different type of issues, where to see the project roadmap. TODO: link the contribution guide. Godot community and docs TODO: Mention that Godot is a reference to keep in sight","title":"Getting help"},{"location":"getting-started/getting-help/#join-our-community","text":"We do our best to keep this documentation relevant and up to date, but we know that there are nuances and needs that will go beyond what we can provide. That's where our community kicks in. TODO: insert link and explanation about the discord server. TODO: explain how to provide help in the community","title":"Join our community"},{"location":"getting-started/getting-help/#github","text":"If you found a bug or if you want to propose an improvement, GitHub is the place to head to. TODO: explain how we approach issues, the different type of issues, where to see the project roadmap. TODO: link the contribution guide.","title":"GitHub"},{"location":"getting-started/getting-help/#godot-community-and-docs","text":"TODO: Mention that Godot is a reference to keep in sight","title":"Godot community and docs"},{"location":"getting-started/installing-popochiu/","text":"Tip Popochiu works on Godot 3.3 and later versions, but we recommend kickstarting new projects on Godot 4, with Popochiu 2.0. Get Godot Download the latest version of the engine here . Extract the Godot executable file ( .exe on Windows) and place it in a directory of your choice. Run the Godot executable. Create a new project by clicking the New project button. Give it a name and then click on Create folder . Click on Create and Edit to launch the editor. Get Popochiu From the asset store TODO: Complete this From Itch Download Popochiu from its itch.io page Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin in the Project > Project Settings menu, Plugins tab (at the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . From GitHub Download the latest release from GitHub . Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin: Project > Project Settings... > Plugins (the tab on the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . If you installed Popochiu properly, you'll see the Main Dock at the right, and this message in the Output panel. [es] Est\u00e1s usando Popochiu, un plugin para crear juegos point n' click [en] You're using Popochiu, a plugin for making point n' click games \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \\( o )3(o)/ \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592","title":"Installing popochiu"},{"location":"getting-started/installing-popochiu/#get-godot","text":"Download the latest version of the engine here . Extract the Godot executable file ( .exe on Windows) and place it in a directory of your choice. Run the Godot executable. Create a new project by clicking the New project button. Give it a name and then click on Create folder . Click on Create and Edit to launch the editor.","title":"Get Godot"},{"location":"getting-started/installing-popochiu/#get-popochiu","text":"","title":"Get Popochiu"},{"location":"getting-started/installing-popochiu/#from-the-asset-store","text":"TODO: Complete this","title":"From the asset store"},{"location":"getting-started/installing-popochiu/#from-itch","text":"Download Popochiu from its itch.io page Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin in the Project > Project Settings menu, Plugins tab (at the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project .","title":"From Itch"},{"location":"getting-started/installing-popochiu/#from-github","text":"Download the latest release from GitHub . Unzip the file and copy the addons folder into your project's folder. If you don't know where your project is, right-click the res:// folder in the FileSystem dock and then select Open in File Manager . Enable the plugin: Project > Project Settings... > Plugins (the tab on the top). Click on the Enable checkbox. A popup will ask you to restart Godot. Close the Project Settings window and then Project > Reload Current Project . If you installed Popochiu properly, you'll see the Main Dock at the right, and this message in the Output panel. [es] Est\u00e1s usando Popochiu, un plugin para crear juegos point n' click [en] You're using Popochiu, a plugin for making point n' click games \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592 \\( o )3(o)/ \u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592\u2592","title":"From GitHub"},{"location":"getting-started/tutorials/","text":"Tutorials TODO Video Tutorials The following video tutorials (English subs) are available for Popochiu 1: How to setup your project, create a room and a character What are the baselines, how to create gaps and how to use Hotspots How to create Props with interaction and inventory items How to create dialog trees How to enable/disable dialog options and use inventory items on characters, Props and Hotspots How to setup a room bigger than the game window, and how to move between rooms How to add sound effects, music, voices, and graphic interface sounds","title":"Tutorials"},{"location":"getting-started/tutorials/#tutorials","text":"TODO","title":"Tutorials"},{"location":"getting-started/tutorials/#video-tutorials","text":"The following video tutorials (English subs) are available for Popochiu 1: How to setup your project, create a room and a character What are the baselines, how to create gaps and how to use Hotspots How to create Props with interaction and inventory items How to create dialog trees How to enable/disable dialog options and use inventory items on characters, Props and Hotspots How to setup a room bigger than the game window, and how to move between rooms How to add sound effects, music, voices, and graphic interface sounds","title":"Video Tutorials"},{"location":"how-to-develop-a-game/","text":"","title":"Index"},{"location":"how-to-develop-a-game/adding-sound/","text":"TODO","title":"Adding sound"},{"location":"how-to-develop-a-game/creating-characters/","text":"TODO","title":"Creating characters"},{"location":"how-to-develop-a-game/creating-rooms/","text":"TODO","title":"Creating rooms"},{"location":"how-to-develop-a-game/kickstarting-a-project/","text":"TODO","title":"Kickstarting a project"},{"location":"how-to-develop-a-game/managing-the-inventory/","text":"TODO","title":"Managing the inventory"},{"location":"how-to-develop-a-game/playing-animations/","text":"TODO","title":"Playing animations"},{"location":"how-to-develop-a-game/scripting-interactions/","text":"TODO","title":"Scripting interactions"},{"location":"how-to-develop-a-game/writing-dialogues/","text":"TODO","title":"Writing dialogues"},{"location":"the-editor-handbook/","text":"","title":"Index"},{"location":"the-editor-handbook/editor-settings/","text":"TODO: how to reach the editor settings and set them up","title":"Editor settings"},{"location":"the-editor-handbook/importers/","text":"Aseprite Importers These tools enable a smooth workflow for the creation of graphical elements in the game. The main goal is to integrate with Aseprite in a way that promotes quick iterations, starting from a visual draft and evolving game scripting and graphics together as things take shape. Importers are available for Characters and Rooms , allowing an almost one-click creation of the complete room structure. Next releases will introduce an Importer for Inventory items too. Basics The plugin works by reading tags from a properly organized Aseprite source file and using that information to populate the target Popochiu Object in a single pass. The result of the process differs depending on the target object type: For Characters , every tag represents a specific animation (ex. the talk animation), and when applicable, the animation direction (ex. up, down, left or right). So in a typical project of medium size, there will be specific tags for talk up , talk down , walk left , walk right , and so on, plus very specific tags for special cutscene animations ( eat multifolded pizza , brush alien dog hair , jump across cakes chasm , etc). For Rooms , every tag represents a Prop and for each tag, a new prop with its own animation is created and populated by the appropriate animation (or sprite). Background and foreground elements are props, of course, and it will be possible to configure each prop visibility and clickability at import. Despite having slightly different outputs, the structure of a Character's or Room's Aseprite source file is basically the same. Let's see examples for both. Aseprite file organization Please take a look at the following image: First notable thing is, a single file contains all animations for the character, identified by tags ( marker 1 ). Each tag will be used to create a single animation, named after the tag, for the Character. Under the hood Popochiu Characters already embed a Sprite2D and an AnimationPlayer. The whole spritesheet is assigned as texture to the Sprite2D and every tag becomes a configured animation in the AnimationPlayer - even the single-sprite ones. They are then accessible by specific methods on the Character, as explained below. Your file can also be organized in layers ( marker 2 ). Layer names are completely up to you and you may create as many as you like. The importer has an option to import only visible layers, that's useful if you have reference or background layers that you don't want to be part of your sprite. Layers are particularly useful in Rooms source files, because without them, isolating props tend to become pretty messy. Take a look at the following example. To keep different props apart, the image is organized in layers ( marker 1 ). In the specific case, layer names and tag names match, but you can of course have situations where more than one layer is necessary to render a specific tag (it's pretty common really); a typical example is the background: in the example above, we could have decided to have the trees on the background prop. The resulting Aseprite file would have looked like this then: Notice how the Tree tag disappeared and the Tree layer is now present with the Background one in the Background tag. On the other hand, you can have tags with many frames on the same layer. This is the most common case because you often wants your props to be animated, like in the case of our crackling bonefire (see marker 2 in the image above): Here we have an isolated fire, composed by 4 frames, all grouped by the proper tag. Basically all combinations of layers and frames are allowed: what you see in a specific animation if you play the tag in Aseprite, will be imported as is in the Prop. Note Observant readers will have noticed that the first frame has no tag and of course, despite including all \"props\", it's not animated. Indeed it is there just as a reference frame for the artist to paint \"in place\". You may have as many untagged frames as you wont in your Room source files: they will be ignored by the importer and will never land into your Popochiu project. This makes things very convenient when composing the scene. Under the hood As for Popochiu Characters, every Prop comes with a bundled Sprite2D and a dedicated AnimationPlayer. Each tag will be extracted as a spritesheet and imported as a single animation. Yes , this may seem overkill but this setup common to Props and Characters allows for easier maintenance and is there to support more functions in the future. Note Even more observant readers will also have realized at this point, that by how things work, each prop sprite will be the size of the whole scene. That's right, but don't be horrified. This approach has a lot of advantages at the sole cost of asking a swift third-millenium game engine to render some more transparent pixels. What we gain is automatic placing of the visual in the scene at import time, and a common rect origin for each prop that will keep baselines and other coordinates consistent among them in the same scene. Back to the tags: you can name them whatever you want, but to get the most out of this functionality, stick to the following conventions: Case style You can use snake_case or PascalCase to name your tags, as you prefer. They will be converted to snake_case anyway before creating animations. Since this can change in the future, we strongly advise not to rely on case sensitivity to differentiate between animations ! Be explicit. Reserved animation names The engine will automatically recognize the following reserved names and use them properly: idle , walk , talk , grab . All of them take for granted the character is facing right and it will be flipped to the left and used for up and down directions too, unless you don't provide... Directional suffixes The engine supports directional suffixes for eight possible directions (up, up-left, left, down-left, down, etc). The complete list of suffixes is _u , _ur , _r , _dr , _d , _dl , _l , _ul . Every animation you want to create (not just the reserved ones) can be made direction-aware by creating it with the right suffixes. For example, to create a walk animation that supports the four main directions, you create walk_u , walk_d , walk_r and walk_l . If you don't create walk_l , walk_r will be automatically flipped. Note As mentioned the importer will convert every animation name to snake_case . This means that the following tags are all equivalent: talk_u , Talk_u , talkU , TalkU . The good: you can use the style you prefer and directions will be still recognized. The bad: if you have Talk_u and TalkU and they mean different things, you're out of luck. Talk_u and Talku works though. Single-animation file If a file contains no tags, it will be imported as a single animation named default . Multiple source files If you are in the need, you may want to separate your character animations over different source files. This is feasible, but keeping everything in a single file is the best option to speed up development by a great amount. The plugin allows you to set a single source file at a time, so if you have multiple sources, you have to constantly switch between source files, losing your preferences in the process. In addition, you have to trade the ability to reset all animations off for an incremental import (see below). Importer settings The Aseprite Importer exposes its configuration under the Popochiu -> Import sections in both the Editor Settings and the Project Settings . Editor Settings Editor Settings contain those configurations that may change between team members' local development environment, like the Aseprite command path, and/or that are valid across different projects. Enable Aseprite Importer : Allows the user to enable or disable the importer in their editor. Useful to avoid cluttering the inspector or getting errors for those who don't use Aseprite or don't have it available in a specific environment. Note This option is only available starting from Popochiu 2.0. In Popochiu 1.0 the importer can't be disabled. Command Path : This is the single most important setting to make the plugin work. On Windows, this field must contain the full path to Aseprite executable (having the command in PATH won't work due to some Godot limitations on command execution under Windows). In *nix systems (Linux and MacOS), you can choose to provide the Aseprite command (if in PATH ) or the full path, as you prefer. Anyway, the plugin will check for the correct execution of the command before initializing itself. If something goes wrong, the output panel will give useful information to fix the problem. Remove JSON file When Aseprite is invoked by the importing procedure, it generates a JSON file with metadata that is necessary to complete the job, alongside the spritesheet PNG file. This file is then useless and can be safely erased, most of all if you are versioning your code (you are, aren't you?!). If for some reason you want to keep the output file, just unflag this setting. Note In Popochiu 1.x for Godot 3, all these settings are found under \"Project Settings\" (see below). Project Settings Among the Project Settings you'll find those you may want to share with your team, and that mostly impact the importing workflow, setting defaults shared by every instance of the plugin. Note Since Godot 4, Project Settings have an \"Advanced Settings\" filter. Plugins can't declare their settings as basic , so please make sure you have the upper left toggle activated or you won't see Popochiu's settings section. Import Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want it imported or not. This is useful if you have half-baked animations or reference tags of some sort. When this setting is flagged, all new animations in the list will be automatically flagged as \"to be imported\". When this setting is off, they will be flagged as \"not to be imported\". Loop Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want that animation to loop or if it has to be run a single time. Animations like talk or walk are usually looping, but animations specific for cutscenes or special cases may be single runs. When this setting is flagged, all new animations in the list will be automatically flagged as \"looping\". When this setting is off, they will be flagged as \"non-looping\". New Props Visible by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be created visible, or invisible (useful for props that have to be shown only at certain conditions). When this setting is flagged, all elements in the list will be automatically flagged as \"visible\". When this setting is off, they will be flagged as \"hidden\". New Props Clickable by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be interactive, or non-interactive. When this setting is flagged, all elements in the list will be automatically flagged as \"interactive\". When this setting is off, they will be flagged as \"non-interactive\". Wipe old Animations : This is the default value for the option with the same name that appears in the importer interface (see below for more information). Set this as you prefer so you don't have to do it all the times, depending on your workflow. Importer interface The importer will show a slighlty different interface depending on the target Popochiu Object. The following sections show examples for both Characters and Rooms, highlighting the small differences. Opening the Importer The Character importer tool is visible in the inspector, when you select a PopochiuCharacter object, opening the related scene. You will not see the importer when you select a character instance in a specific room. To see the importer, you must open the character scene and select its root node. Likewise, a Room importer is shown in the Room inspector, when you select the root node of an open Room scene. Note If any error occurs when the plugin starts (for example if there are problems with the Aseprite command or missing dependencies in the scene tree), a warning will be visualized in place of the plugin. Head to the Output Panel to learn how to fix the error. Note If you select a proper target node and no \"Aseprite\" section is shown in the inspector, maybe the functionality is disabled. Chech that Popochiu -> Importer -> Enable Aseprite Importer option is flagged in the Editor Settings . Using the Importer When you select a PopochiuCharacter node, you should see this interface in the node inspector, right after the script variables section: Use Aseprite file field ( 1 ) to select the source file. When you do this, the plugin automatically scans the file and lists every tag found ( 2 ) (or none if the file is a single animation with no tags). For each tag that is found and listed, two flags are available ( 3 ): Import this animation and Set the animation as looping . Deactivating them can prevent a specific animation to be imported or set the animation as a single-run. For PopochiuRoom node, the interface is only slightly different, showing two more flags for each tag ( 1 below): This prop will be visible and This prop will be clickable flags will make the imported prop visible and interactive, respectively. Note Visibility and clickability can both be set at a later stage via script or interface, but these settings allow a one-time setting for frequent, iterative reimporting. Note Visibility and Import flags are not to be confused. You may want to import an invisible prop that will be made visible during the course of the game (think two props for an open and a closed door, that you want to switch based on player's actions). The Rescan button at the top allows you to refresh the tags list if you make any changes. It will be your quick-iteration best friend. Rescanning the tags will not overwrite the preferences you already selected for each tag. It will anyway update the frame count references for each animation, get rid of tags that are no more available, and add new ones. Note You must rescan your source file before reimporting it, if you change the frame count for already available animations, or your imported animations will miss some frames or be all messed-up. In the Options dropdown ( 4 ), you can set some parameters for the importer: Output Folder : This refers to the folder in which the TextureAtlas PNG file will be created. If unset, it defaults to the same folder as the scene (in case of a Room Prop, each atlas will be put into the related prop's folder). This helps in case you want to enforce a specific file structure. Output File Name : If empty, this will default to the Aseprite original source file name. Should you want to select a different file name for your atlas, specify it here. Only visible layers : This flag allows you to ignore hidden layers. Useful if you have reference layers or backgrounds that you don't want to appear in your sprite. Tip Remember to hide reference layers before saving the source file! Wipe old animations : When flagged, all the animations already imported for a Character will be wiped before re-importing them. You typically want to keep this setting flagged when you are iterating over a character's graphics and you want to make sure that if you move or rename animations, every possible leftover is removed and the final result is always coherent with the source file, 1-on-1. You typically want to unflag this when you are working with multiple source files for a single character, and you want to import animation from a file without getting rid of the animations you have already imported before. Beware that animations with the same name will always be overwritten. If you keep this setting unflagged and you have leftover animations saved for a character you will need to remove them by hand. All these preferences are automatically saved with the target PopochiuCharacter or PopochiuRoom node, so they are persisted between sessions, and different for each single element. If for some reason you want to completely reset an Importer anew, just use the Reset preferences button at the very bottom (confirmation required). Importing animations Finally, if everything is set up correctly, you can hit the Import button. The importer will do its magic (beware: very large files with hundreds to thousands of frames will take a while to load, manly due to Aseprite exporting them). When the procedure is over a popup message will report the status and processed tags count. For Characters , you will find all your animations in the AnimationPlayer of your character. All reserved animations ( idle , walk , talk , grab ) will automagically be available in your game and used by the engine. You can use play_animation() method to play any other animation by passing its name (without directional suffixes) as a parameter. For Rooms , you will see a set of props have been created automatically and populated with the correct sprites. If you have animated props (like the fire in this page's example), starting the scene in the player will show the animation running. You can check the animation is correctly looping, if that's the case. Note that existing props with the same name will have their animations seamlessly updated by the procedure, preserving any other properties or configuration they may have. The Room importer is not yet tracing colliders automatically, but each Prop has an embedded polygon. To edit it, select the Prop in the room tree (or in the Popochiu panel room tab) and click the Interaction Polygon button in the toolbar.","title":"Aseprite Importers"},{"location":"the-editor-handbook/importers/#aseprite-importers","text":"These tools enable a smooth workflow for the creation of graphical elements in the game. The main goal is to integrate with Aseprite in a way that promotes quick iterations, starting from a visual draft and evolving game scripting and graphics together as things take shape. Importers are available for Characters and Rooms , allowing an almost one-click creation of the complete room structure. Next releases will introduce an Importer for Inventory items too.","title":"Aseprite Importers"},{"location":"the-editor-handbook/importers/#basics","text":"The plugin works by reading tags from a properly organized Aseprite source file and using that information to populate the target Popochiu Object in a single pass. The result of the process differs depending on the target object type: For Characters , every tag represents a specific animation (ex. the talk animation), and when applicable, the animation direction (ex. up, down, left or right). So in a typical project of medium size, there will be specific tags for talk up , talk down , walk left , walk right , and so on, plus very specific tags for special cutscene animations ( eat multifolded pizza , brush alien dog hair , jump across cakes chasm , etc). For Rooms , every tag represents a Prop and for each tag, a new prop with its own animation is created and populated by the appropriate animation (or sprite). Background and foreground elements are props, of course, and it will be possible to configure each prop visibility and clickability at import. Despite having slightly different outputs, the structure of a Character's or Room's Aseprite source file is basically the same. Let's see examples for both.","title":"Basics"},{"location":"the-editor-handbook/importers/#aseprite-file-organization","text":"Please take a look at the following image: First notable thing is, a single file contains all animations for the character, identified by tags ( marker 1 ). Each tag will be used to create a single animation, named after the tag, for the Character. Under the hood Popochiu Characters already embed a Sprite2D and an AnimationPlayer. The whole spritesheet is assigned as texture to the Sprite2D and every tag becomes a configured animation in the AnimationPlayer - even the single-sprite ones. They are then accessible by specific methods on the Character, as explained below. Your file can also be organized in layers ( marker 2 ). Layer names are completely up to you and you may create as many as you like. The importer has an option to import only visible layers, that's useful if you have reference or background layers that you don't want to be part of your sprite. Layers are particularly useful in Rooms source files, because without them, isolating props tend to become pretty messy. Take a look at the following example. To keep different props apart, the image is organized in layers ( marker 1 ). In the specific case, layer names and tag names match, but you can of course have situations where more than one layer is necessary to render a specific tag (it's pretty common really); a typical example is the background: in the example above, we could have decided to have the trees on the background prop. The resulting Aseprite file would have looked like this then: Notice how the Tree tag disappeared and the Tree layer is now present with the Background one in the Background tag. On the other hand, you can have tags with many frames on the same layer. This is the most common case because you often wants your props to be animated, like in the case of our crackling bonefire (see marker 2 in the image above): Here we have an isolated fire, composed by 4 frames, all grouped by the proper tag. Basically all combinations of layers and frames are allowed: what you see in a specific animation if you play the tag in Aseprite, will be imported as is in the Prop. Note Observant readers will have noticed that the first frame has no tag and of course, despite including all \"props\", it's not animated. Indeed it is there just as a reference frame for the artist to paint \"in place\". You may have as many untagged frames as you wont in your Room source files: they will be ignored by the importer and will never land into your Popochiu project. This makes things very convenient when composing the scene. Under the hood As for Popochiu Characters, every Prop comes with a bundled Sprite2D and a dedicated AnimationPlayer. Each tag will be extracted as a spritesheet and imported as a single animation. Yes , this may seem overkill but this setup common to Props and Characters allows for easier maintenance and is there to support more functions in the future. Note Even more observant readers will also have realized at this point, that by how things work, each prop sprite will be the size of the whole scene. That's right, but don't be horrified. This approach has a lot of advantages at the sole cost of asking a swift third-millenium game engine to render some more transparent pixels. What we gain is automatic placing of the visual in the scene at import time, and a common rect origin for each prop that will keep baselines and other coordinates consistent among them in the same scene. Back to the tags: you can name them whatever you want, but to get the most out of this functionality, stick to the following conventions:","title":"Aseprite file organization"},{"location":"the-editor-handbook/importers/#case-style","text":"You can use snake_case or PascalCase to name your tags, as you prefer. They will be converted to snake_case anyway before creating animations. Since this can change in the future, we strongly advise not to rely on case sensitivity to differentiate between animations ! Be explicit.","title":"Case style"},{"location":"the-editor-handbook/importers/#reserved-animation-names","text":"The engine will automatically recognize the following reserved names and use them properly: idle , walk , talk , grab . All of them take for granted the character is facing right and it will be flipped to the left and used for up and down directions too, unless you don't provide...","title":"Reserved animation names"},{"location":"the-editor-handbook/importers/#directional-suffixes","text":"The engine supports directional suffixes for eight possible directions (up, up-left, left, down-left, down, etc). The complete list of suffixes is _u , _ur , _r , _dr , _d , _dl , _l , _ul . Every animation you want to create (not just the reserved ones) can be made direction-aware by creating it with the right suffixes. For example, to create a walk animation that supports the four main directions, you create walk_u , walk_d , walk_r and walk_l . If you don't create walk_l , walk_r will be automatically flipped. Note As mentioned the importer will convert every animation name to snake_case . This means that the following tags are all equivalent: talk_u , Talk_u , talkU , TalkU . The good: you can use the style you prefer and directions will be still recognized. The bad: if you have Talk_u and TalkU and they mean different things, you're out of luck. Talk_u and Talku works though.","title":"Directional suffixes"},{"location":"the-editor-handbook/importers/#single-animation-file","text":"If a file contains no tags, it will be imported as a single animation named default .","title":"Single-animation file"},{"location":"the-editor-handbook/importers/#multiple-source-files","text":"If you are in the need, you may want to separate your character animations over different source files. This is feasible, but keeping everything in a single file is the best option to speed up development by a great amount. The plugin allows you to set a single source file at a time, so if you have multiple sources, you have to constantly switch between source files, losing your preferences in the process. In addition, you have to trade the ability to reset all animations off for an incremental import (see below).","title":"Multiple source files"},{"location":"the-editor-handbook/importers/#importer-settings","text":"The Aseprite Importer exposes its configuration under the Popochiu -> Import sections in both the Editor Settings and the Project Settings .","title":"Importer settings"},{"location":"the-editor-handbook/importers/#editor-settings","text":"Editor Settings contain those configurations that may change between team members' local development environment, like the Aseprite command path, and/or that are valid across different projects. Enable Aseprite Importer : Allows the user to enable or disable the importer in their editor. Useful to avoid cluttering the inspector or getting errors for those who don't use Aseprite or don't have it available in a specific environment. Note This option is only available starting from Popochiu 2.0. In Popochiu 1.0 the importer can't be disabled. Command Path : This is the single most important setting to make the plugin work. On Windows, this field must contain the full path to Aseprite executable (having the command in PATH won't work due to some Godot limitations on command execution under Windows). In *nix systems (Linux and MacOS), you can choose to provide the Aseprite command (if in PATH ) or the full path, as you prefer. Anyway, the plugin will check for the correct execution of the command before initializing itself. If something goes wrong, the output panel will give useful information to fix the problem. Remove JSON file When Aseprite is invoked by the importing procedure, it generates a JSON file with metadata that is necessary to complete the job, alongside the spritesheet PNG file. This file is then useless and can be safely erased, most of all if you are versioning your code (you are, aren't you?!). If for some reason you want to keep the output file, just unflag this setting. Note In Popochiu 1.x for Godot 3, all these settings are found under \"Project Settings\" (see below).","title":"Editor Settings"},{"location":"the-editor-handbook/importers/#project-settings","text":"Among the Project Settings you'll find those you may want to share with your team, and that mostly impact the importing workflow, setting defaults shared by every instance of the plugin. Note Since Godot 4, Project Settings have an \"Advanced Settings\" filter. Plugins can't declare their settings as basic , so please make sure you have the upper left toggle activated or you won't see Popochiu's settings section. Import Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want it imported or not. This is useful if you have half-baked animations or reference tags of some sort. When this setting is flagged, all new animations in the list will be automatically flagged as \"to be imported\". When this setting is off, they will be flagged as \"not to be imported\". Loop Animation by Default : When a source file is scanned, a list of the contained tags is populated. For each element in the list, you can choose if you want that animation to loop or if it has to be run a single time. Animations like talk or walk are usually looping, but animations specific for cutscenes or special cases may be single runs. When this setting is flagged, all new animations in the list will be automatically flagged as \"looping\". When this setting is off, they will be flagged as \"non-looping\". New Props Visible by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be created visible, or invisible (useful for props that have to be shown only at certain conditions). When this setting is flagged, all elements in the list will be automatically flagged as \"visible\". When this setting is off, they will be flagged as \"hidden\". New Props Clickable by Default : When a Room source file is scanned, a list of the contained tags is populated. For each element in the list, which will be imported as a Prop, you can choose if you want the new prop to be interactive, or non-interactive. When this setting is flagged, all elements in the list will be automatically flagged as \"interactive\". When this setting is off, they will be flagged as \"non-interactive\". Wipe old Animations : This is the default value for the option with the same name that appears in the importer interface (see below for more information). Set this as you prefer so you don't have to do it all the times, depending on your workflow.","title":"Project Settings"},{"location":"the-editor-handbook/importers/#importer-interface","text":"The importer will show a slighlty different interface depending on the target Popochiu Object. The following sections show examples for both Characters and Rooms, highlighting the small differences.","title":"Importer interface"},{"location":"the-editor-handbook/importers/#opening-the-importer","text":"The Character importer tool is visible in the inspector, when you select a PopochiuCharacter object, opening the related scene. You will not see the importer when you select a character instance in a specific room. To see the importer, you must open the character scene and select its root node. Likewise, a Room importer is shown in the Room inspector, when you select the root node of an open Room scene. Note If any error occurs when the plugin starts (for example if there are problems with the Aseprite command or missing dependencies in the scene tree), a warning will be visualized in place of the plugin. Head to the Output Panel to learn how to fix the error. Note If you select a proper target node and no \"Aseprite\" section is shown in the inspector, maybe the functionality is disabled. Chech that Popochiu -> Importer -> Enable Aseprite Importer option is flagged in the Editor Settings .","title":"Opening the Importer"},{"location":"the-editor-handbook/importers/#using-the-importer","text":"When you select a PopochiuCharacter node, you should see this interface in the node inspector, right after the script variables section: Use Aseprite file field ( 1 ) to select the source file. When you do this, the plugin automatically scans the file and lists every tag found ( 2 ) (or none if the file is a single animation with no tags). For each tag that is found and listed, two flags are available ( 3 ): Import this animation and Set the animation as looping . Deactivating them can prevent a specific animation to be imported or set the animation as a single-run. For PopochiuRoom node, the interface is only slightly different, showing two more flags for each tag ( 1 below): This prop will be visible and This prop will be clickable flags will make the imported prop visible and interactive, respectively. Note Visibility and clickability can both be set at a later stage via script or interface, but these settings allow a one-time setting for frequent, iterative reimporting. Note Visibility and Import flags are not to be confused. You may want to import an invisible prop that will be made visible during the course of the game (think two props for an open and a closed door, that you want to switch based on player's actions). The Rescan button at the top allows you to refresh the tags list if you make any changes. It will be your quick-iteration best friend. Rescanning the tags will not overwrite the preferences you already selected for each tag. It will anyway update the frame count references for each animation, get rid of tags that are no more available, and add new ones. Note You must rescan your source file before reimporting it, if you change the frame count for already available animations, or your imported animations will miss some frames or be all messed-up. In the Options dropdown ( 4 ), you can set some parameters for the importer: Output Folder : This refers to the folder in which the TextureAtlas PNG file will be created. If unset, it defaults to the same folder as the scene (in case of a Room Prop, each atlas will be put into the related prop's folder). This helps in case you want to enforce a specific file structure. Output File Name : If empty, this will default to the Aseprite original source file name. Should you want to select a different file name for your atlas, specify it here. Only visible layers : This flag allows you to ignore hidden layers. Useful if you have reference layers or backgrounds that you don't want to appear in your sprite. Tip Remember to hide reference layers before saving the source file! Wipe old animations : When flagged, all the animations already imported for a Character will be wiped before re-importing them. You typically want to keep this setting flagged when you are iterating over a character's graphics and you want to make sure that if you move or rename animations, every possible leftover is removed and the final result is always coherent with the source file, 1-on-1. You typically want to unflag this when you are working with multiple source files for a single character, and you want to import animation from a file without getting rid of the animations you have already imported before. Beware that animations with the same name will always be overwritten. If you keep this setting unflagged and you have leftover animations saved for a character you will need to remove them by hand. All these preferences are automatically saved with the target PopochiuCharacter or PopochiuRoom node, so they are persisted between sessions, and different for each single element. If for some reason you want to completely reset an Importer anew, just use the Reset preferences button at the very bottom (confirmation required).","title":"Using the Importer"},{"location":"the-editor-handbook/importers/#importing-animations","text":"Finally, if everything is set up correctly, you can hit the Import button. The importer will do its magic (beware: very large files with hundreds to thousands of frames will take a while to load, manly due to Aseprite exporting them). When the procedure is over a popup message will report the status and processed tags count. For Characters , you will find all your animations in the AnimationPlayer of your character. All reserved animations ( idle , walk , talk , grab ) will automagically be available in your game and used by the engine. You can use play_animation() method to play any other animation by passing its name (without directional suffixes) as a parameter. For Rooms , you will see a set of props have been created automatically and populated with the correct sprites. If you have animated props (like the fire in this page's example), starting the scene in the player will show the animation running. You can check the animation is correctly looping, if that's the case. Note that existing props with the same name will have their animations seamlessly updated by the procedure, preserving any other properties or configuration they may have. The Room importer is not yet tracing colliders automatically, but each Prop has an embedded polygon. To edit it, select the Prop in the room tree (or in the Popochiu panel room tab) and click the Interaction Polygon button in the toolbar.","title":"Importing animations"},{"location":"the-editor-handbook/interface-overview/","text":"Editor Settings TODO Popochiu dock The core of Popochiu editor functions, this panel allows to navigate the game objects without the need to access the scene tree. TODO complete, fix links Main tab - Used to work with the main Objects of the game: Rooms, Characters, Inventory items, Dialogs. Room tab - Used to work with the Objects of a Room when it is the active scene in the 2D editor. It shows the Props, Hotspots, Walkable areas, and Regions of the room. Audio tab - Used to show the audio clips that can be played in the game. They are grouped in Music, Sound effects, Voices, and Graphic interface. Settings - Used to modify properties related to the game behavior. Toolbar buttons TODO Inspectors TODO","title":"Interface overview"},{"location":"the-editor-handbook/interface-overview/#editor-settings","text":"TODO","title":"Editor Settings"},{"location":"the-editor-handbook/interface-overview/#popochiu-dock","text":"The core of Popochiu editor functions, this panel allows to navigate the game objects without the need to access the scene tree. TODO complete, fix links Main tab - Used to work with the main Objects of the game: Rooms, Characters, Inventory items, Dialogs. Room tab - Used to work with the Objects of a Room when it is the active scene in the 2D editor. It shows the Props, Hotspots, Walkable areas, and Regions of the room. Audio tab - Used to show the audio clips that can be played in the game. They are grouped in Music, Sound effects, Voices, and Graphic interface. Settings - Used to modify properties related to the game behavior.","title":"Popochiu dock"},{"location":"the-editor-handbook/interface-overview/#toolbar-buttons","text":"TODO","title":"Toolbar buttons"},{"location":"the-editor-handbook/interface-overview/#inspectors","text":"TODO","title":"Inspectors"},{"location":"the-editor-handbook/popochiu-dock/","text":"The Popochiu dock consists of different tabs, used to group the objects that build the game. Main tab Room tab Audio tab GUI tab TODO: fill all the sections","title":"Popochiu dock"},{"location":"the-editor-handbook/popochiu-dock/#main-tab","text":"","title":"Main tab"},{"location":"the-editor-handbook/popochiu-dock/#room-tab","text":"","title":"Room tab"},{"location":"the-editor-handbook/popochiu-dock/#audio-tab","text":"","title":"Audio tab"},{"location":"the-editor-handbook/popochiu-dock/#gui-tab","text":"TODO: fill all the sections","title":"GUI tab"},{"location":"the-editor-handbook/toolbar-buttons/","text":"TODO: all differet toolbar buttons by popochiu object Character Props ...","title":"Toolbar buttons"},{"location":"the-editor-handbook/toolbar-buttons/#character","text":"","title":"Character"},{"location":"the-editor-handbook/toolbar-buttons/#props","text":"","title":"Props"},{"location":"the-editor-handbook/toolbar-buttons/#_1","text":"","title":"..."},{"location":"the-engine-handbook/","text":"","title":"Index"},{"location":"the-engine-handbook/scripting-overview/","text":"Singletons TODO Where to write game scripts TODO Popochiu Objects state TODO","title":"Scripting overview"},{"location":"the-engine-handbook/scripting-overview/#singletons","text":"TODO","title":"Singletons"},{"location":"the-engine-handbook/scripting-overview/#where-to-write-game-scripts","text":"TODO","title":"Where to write game scripts"},{"location":"the-engine-handbook/scripting-overview/#popochiu-objects-state","text":"TODO","title":"Popochiu Objects state"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/","text":"9_verb_commands_container.gd Extends: GridContainer Description Method Descriptions press_command func press_command(command: int) -> void unpress_commands func unpress_commands() -> void highlight_command func highlight_command(command: int, highlighted: bool = true) -> void","title":"9 verb commands container.gd"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#9_verb_commands_containergd","text":"Extends: GridContainer","title":"9_verb_commands_container.gd"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#press_command","text":"func press_command(command: int) -> void","title":"press_command"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#unpress_commands","text":"func unpress_commands() -> void","title":"unpress_commands"},{"location":"the-engine-handbook/scripting-reference/9_verb_commands_container.gd/#highlight_command","text":"func highlight_command(command: int, highlighted: bool = true) -> void","title":"highlight_command"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/","text":"9_verb_panel.gd Extends: PanelContainer Description Property Descriptions hover_text_centered var hover_text_centered: RichTextLabel commands_container var commands_container: GridContainer Method Descriptions unpress_commands func unpress_commands() -> void highlight_command func highlight_command(command_id: int, highlighted: bool = true) -> void","title":"9 verb panel.gd"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#9_verb_panelgd","text":"Extends: PanelContainer","title":"9_verb_panel.gd"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#hover_text_centered","text":"var hover_text_centered: RichTextLabel","title":"hover_text_centered"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#commands_container","text":"var commands_container: GridContainer","title":"commands_container"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#unpress_commands","text":"func unpress_commands() -> void","title":"unpress_commands"},{"location":"the-engine-handbook/scripting-reference/9_verb_panel.gd/#highlight_command","text":"func highlight_command(command_id: int, highlighted: bool = true) -> void","title":"highlight_command"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/","text":"PopochiuCharacterData Extends: Resource Description Property Descriptions script_name @export var script_name: String = \"\" The identifier of the object used in scripts. scene @export var scene: String = \"\" The path to the scene file to be used when adding the character to the game during runtime. Method Descriptions on_save func on_save() -> Dictionary Use this to store custom data when saving the game. The returned [Dictionary] must contain only JSON supported types: [bool], [int], [float], [String]. on_load func on_load(data: Dictionary) -> void Called when the game is loaded. [param data] will have the same structure you defined for the returned [Dictionary] by [method _on_save].","title":"PopochiuCharacterData"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#popochiucharacterdata","text":"Extends: Resource","title":"PopochiuCharacterData"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#script_name","text":"@export var script_name: String = \"\" The identifier of the object used in scripts.","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#scene","text":"@export var scene: String = \"\" The path to the scene file to be used when adding the character to the game during runtime.","title":"scene"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#on_save","text":"func on_save() -> Dictionary Use this to store custom data when saving the game. The returned [Dictionary] must contain only JSON supported types: [bool], [int], [float], [String].","title":"on_save"},{"location":"the-engine-handbook/scripting-reference/PopochiuCharacterData/#on_load","text":"func on_load(data: Dictionary) -> void Called when the game is loaded. [param data] will have the same structure you defined for the returned [Dictionary] by [method _on_save].","title":"on_load"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/","text":"PopochiuDialogOption Extends: Resource Description Property Descriptions id @export var id: String = \"\" Setter : @id_setter The identifier of the option. Use it when scripting. text @export var text: String = \"\" The text to show on screen for the option. icon @export var icon: Texture = null The icon to show on screen for the option. visible @export var visible: bool = true Whether this option is visible. disabled @export var disabled: bool = false Whether this option is disabled. If [code]true[/code], the option won\u00b4t be rendered. always_on @export var always_on: bool = false Whether this option should be [b]always[/b] rendered as not previously selected. script_name var script_name: String = \"\" Stores the same value of the [member id] property. used var used: bool = false Whether the option was already been selected. If [code]true[/code], then the option's [member text] will be shown different in the options menu, so players know they already clicked the option. used_times var used_times: int = 0 The number of times this options has been clicked. Method Descriptions turn_on func turn_on() -> void Makes the option visible. Won\u00b4t work if the option is [member disabled]. turn_off func turn_off() -> void Makes the option invisible. turn_off_forever func turn_off_forever() -> void Disables the option by making [member disable] [code]true[/code]. set_id func set_id(value: String) -> void","title":"PopochiuDialogOption"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#popochiudialogoption","text":"Extends: Resource","title":"PopochiuDialogOption"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#id","text":"@export var id: String = \"\" Setter : @id_setter The identifier of the option. Use it when scripting.","title":"id"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#text","text":"@export var text: String = \"\" The text to show on screen for the option.","title":"text"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#icon","text":"@export var icon: Texture = null The icon to show on screen for the option.","title":"icon"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#visible","text":"@export var visible: bool = true Whether this option is visible.","title":"visible"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#disabled","text":"@export var disabled: bool = false Whether this option is disabled. If [code]true[/code], the option won\u00b4t be rendered.","title":"disabled"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#always_on","text":"@export var always_on: bool = false Whether this option should be [b]always[/b] rendered as not previously selected.","title":"always_on"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#script_name","text":"var script_name: String = \"\" Stores the same value of the [member id] property.","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#used","text":"var used: bool = false Whether the option was already been selected. If [code]true[/code], then the option's [member text] will be shown different in the options menu, so players know they already clicked the option.","title":"used"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#used_times","text":"var used_times: int = 0 The number of times this options has been clicked.","title":"used_times"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#turn_on","text":"func turn_on() -> void Makes the option visible. Won\u00b4t work if the option is [member disabled].","title":"turn_on"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#turn_off","text":"func turn_off() -> void Makes the option invisible.","title":"turn_off"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#turn_off_forever","text":"func turn_off_forever() -> void Disables the option by making [member disable] [code]true[/code].","title":"turn_off_forever"},{"location":"the-engine-handbook/scripting-reference/PopochiuDialogOption/#set_id","text":"func set_id(value: String) -> void","title":"set_id"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/","text":"PopochiuGUIInfo Extends: Resource Description Property Descriptions title @export var title: String = \"\" description @export var description: String = \"\" icon @export var icon: Texture","title":"PopochiuGUIInfo"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#popochiuguiinfo","text":"Extends: Resource","title":"PopochiuGUIInfo"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#title","text":"@export var title: String = \"\"","title":"title"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#description_1","text":"@export var description: String = \"\"","title":"description"},{"location":"the-engine-handbook/scripting-reference/PopochiuGUIInfo/#icon","text":"@export var icon: Texture","title":"icon"},{"location":"the-engine-handbook/scripting-reference/PopochiuHoverText/","text":"PopochiuHoverText Extends: RichTextLabel Description","title":"PopochiuHoverText"},{"location":"the-engine-handbook/scripting-reference/PopochiuHoverText/#popochiuhovertext","text":"Extends: RichTextLabel","title":"PopochiuHoverText"},{"location":"the-engine-handbook/scripting-reference/PopochiuHoverText/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/","text":"PopochiuIAudio Extends: Node Description Property Descriptions twelfth_root_of_two var twelfth_root_of_two: float = 1.0594630943593 Used to convert the value of the pitch set on [member PopochiuAudioCue.pitch] to the corresponding value needed for the [code]pitch_scale[/code] property of the audio stream players. Method Descriptions semitone_to_pitch func semitone_to_pitch(pitch: float) -> float Transforms [param pitch] to a value that can be used to modify the [member AudioStreamPlayer.pitch_scale] or [member AudioStreamPlayer2D.pitch_scale].","title":"PopochiuIAudio"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#popochiuiaudio","text":"Extends: Node","title":"PopochiuIAudio"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#twelfth_root_of_two","text":"var twelfth_root_of_two: float = 1.0594630943593 Used to convert the value of the pitch set on [member PopochiuAudioCue.pitch] to the corresponding value needed for the [code]pitch_scale[/code] property of the audio stream players.","title":"twelfth_root_of_two"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuIAudio/#semitone_to_pitch","text":"func semitone_to_pitch(pitch: float) -> float Transforms [param pitch] to a value that can be used to modify the [member AudioStreamPlayer.pitch_scale] or [member AudioStreamPlayer2D.pitch_scale].","title":"semitone_to_pitch"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/","text":"PopochiuInventoryItemData Extends: Resource Description Property Descriptions script_name @export var script_name: String = \"\" The identifier of the object used in scripts. scene @export var scene: String = \"\" The path to the scene file to be used when adding the character to the game during runtime. Method Descriptions on_save func on_save() -> Dictionary Use this to store custom data when saving the game. The returned [Dictionary] must contain only JSON supported types: [bool], [int], [float], [String]. on_load func on_load(data: Dictionary) -> void Called when the game is loaded. [param data] will have the same structure you defined for the returned [Dictionary] by [method _on_save].","title":"PopochiuInventoryItemData"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#popochiuinventoryitemdata","text":"Extends: Resource","title":"PopochiuInventoryItemData"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#script_name","text":"@export var script_name: String = \"\" The identifier of the object used in scripts.","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#scene","text":"@export var scene: String = \"\" The path to the scene file to be used when adding the character to the game during runtime.","title":"scene"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#on_save","text":"func on_save() -> Dictionary Use this to store custom data when saving the game. The returned [Dictionary] must contain only JSON supported types: [bool], [int], [float], [String].","title":"on_save"},{"location":"the-engine-handbook/scripting-reference/PopochiuInventoryItemData/#on_load","text":"func on_load(data: Dictionary) -> void Called when the game is loaded. [param data] will have the same structure you defined for the returned [Dictionary] by [method _on_save].","title":"on_load"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/","text":"PopochiuSettings Extends: Resource Description Constants Descriptions ImporterDefaults const ImporterDefaults: res://addons/popochiu/engine/others/importer_defaults.gd = preload(\"res://addons/popochiu/engine/others/importer_defaults.gd\") @deprecated Property Descriptions graphic_interface @export var graphic_interface: PackedScene = null A reference to the scene used as the GUI for the game. This will be [color=bf5a50]deprecated[/color]. transition_layer @export var transition_layer: PackedScene = null A reference to the scene used as to handle transition animations between rooms and other game events. This will be [color=bf5a50]deprecated[/color]. skip_cutscene_time @export var skip_cutscene_time: float = 0.2 The time, in seconds, that will take the game to skip a cutscene. text_speeds @export var text_speeds: Array The text speed options that will be available in the game. In the ContextSensitive GUI you can loop between them usin the text speed button in the SettingsBar. default_text_speed @export var default_text_speed: int = 0 The index of the default text speed value in [member text_speeds]. auto_continue_text @export var auto_continue_text: bool = false If [code]true[/code], then dialog lines should auto continue once the animation that shows them finishes. Otherwise, players will have to click the screen in order to continue. use_translations @export var use_translations: bool = false When [code]true[/code] the game will call [method Object.tr] when getting the texts to show in the game. items_on_start @export var items_on_start: Array An array with the [code]script_name[/code] of the inventory items that will be added to the inventory when the game starts. You can use the context menu in front of each inventory item in Popochiu's Main tab to add or remove items from start with the [img]res://addons/popochiu/icons/inventory_item_start.png[/img] [b]Start with it[/b] option. inventory_limit @export var inventory_limit: int = 0 The max number of items players will be able to put in the inventory. inventory_always_visible @export var inventory_always_visible: bool = false Whether the inventory will be always visible, or players will have to do something to make it appear. [b]This is specific to the ContextSensitive GUI[/b]. toolbar_always_visible @export var toolbar_always_visible: bool = false Whether the toolbar (SettingsBar) will be always visible, or players will have to do something to make it appear. [b]This is specific to the ContextSensitive GUI[/b]. fade_color @export var fade_color: Color = \"(0, 0, 0, 1)\" The color the screen changes to it plays a transition (e.g. move between rooms, skip a cutscene). scale_gui @export var scale_gui: bool = true Whether the GUI should scale to match the native game resolution. The default GUI has a 320x180 resolution. max_dialog_options @export var max_dialog_options: int = 3 The number of dialog options to show before showing a scroll bar to render those that exceed this limit. is_pixel_art_game @export var is_pixel_art_game: bool = false If [code]true[/code], the [member CanvasItem.texture_filter] of [PopochiuClickable] and [PopochiuInventoryItem] will be set to [enum CanvasItem.TextureFilter].TEXTURE_FILTER_NEAREST when those objects are created. is_pixel_perfect @export var is_pixel_perfect: bool = false Whether the cursor should move in whole pixels or not. dialog_style @export var dialog_style: int = 0 The style to use in dialog lines:[br][br] - [b]Above Character[/b]. Makes the text appear in top of each character. You can define the position of if using the [b]DialoPos[/b] node in the character's scene.[br] - [b]Portrait[/b]. Texts will appear in a panel located in the center of the game window accompanied by the avatar of the character who is speaking. You can define an avatar for each emotion with the [member PopochiuCharacter.avatars] property.[br] - [b]Caption[/b]. The texts will appear at the bottom of the game window (as if they were subtitles).","title":"PopochiuSettings"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#popochiusettings","text":"Extends: Resource","title":"PopochiuSettings"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#importerdefaults","text":"const ImporterDefaults: res://addons/popochiu/engine/others/importer_defaults.gd = preload(\"res://addons/popochiu/engine/others/importer_defaults.gd\") @deprecated","title":"ImporterDefaults"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#graphic_interface","text":"@export var graphic_interface: PackedScene = null A reference to the scene used as the GUI for the game. This will be [color=bf5a50]deprecated[/color].","title":"graphic_interface"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#transition_layer","text":"@export var transition_layer: PackedScene = null A reference to the scene used as to handle transition animations between rooms and other game events. This will be [color=bf5a50]deprecated[/color].","title":"transition_layer"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#skip_cutscene_time","text":"@export var skip_cutscene_time: float = 0.2 The time, in seconds, that will take the game to skip a cutscene.","title":"skip_cutscene_time"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#text_speeds","text":"@export var text_speeds: Array The text speed options that will be available in the game. In the ContextSensitive GUI you can loop between them usin the text speed button in the SettingsBar.","title":"text_speeds"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#default_text_speed","text":"@export var default_text_speed: int = 0 The index of the default text speed value in [member text_speeds].","title":"default_text_speed"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#auto_continue_text","text":"@export var auto_continue_text: bool = false If [code]true[/code], then dialog lines should auto continue once the animation that shows them finishes. Otherwise, players will have to click the screen in order to continue.","title":"auto_continue_text"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#use_translations","text":"@export var use_translations: bool = false When [code]true[/code] the game will call [method Object.tr] when getting the texts to show in the game.","title":"use_translations"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#items_on_start","text":"@export var items_on_start: Array An array with the [code]script_name[/code] of the inventory items that will be added to the inventory when the game starts. You can use the context menu in front of each inventory item in Popochiu's Main tab to add or remove items from start with the [img]res://addons/popochiu/icons/inventory_item_start.png[/img] [b]Start with it[/b] option.","title":"items_on_start"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#inventory_limit","text":"@export var inventory_limit: int = 0 The max number of items players will be able to put in the inventory.","title":"inventory_limit"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#inventory_always_visible","text":"@export var inventory_always_visible: bool = false Whether the inventory will be always visible, or players will have to do something to make it appear. [b]This is specific to the ContextSensitive GUI[/b].","title":"inventory_always_visible"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#toolbar_always_visible","text":"@export var toolbar_always_visible: bool = false Whether the toolbar (SettingsBar) will be always visible, or players will have to do something to make it appear. [b]This is specific to the ContextSensitive GUI[/b].","title":"toolbar_always_visible"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#fade_color","text":"@export var fade_color: Color = \"(0, 0, 0, 1)\" The color the screen changes to it plays a transition (e.g. move between rooms, skip a cutscene).","title":"fade_color"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#scale_gui","text":"@export var scale_gui: bool = true Whether the GUI should scale to match the native game resolution. The default GUI has a 320x180 resolution.","title":"scale_gui"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#max_dialog_options","text":"@export var max_dialog_options: int = 3 The number of dialog options to show before showing a scroll bar to render those that exceed this limit.","title":"max_dialog_options"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#is_pixel_art_game","text":"@export var is_pixel_art_game: bool = false If [code]true[/code], the [member CanvasItem.texture_filter] of [PopochiuClickable] and [PopochiuInventoryItem] will be set to [enum CanvasItem.TextureFilter].TEXTURE_FILTER_NEAREST when those objects are created.","title":"is_pixel_art_game"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#is_pixel_perfect","text":"@export var is_pixel_perfect: bool = false Whether the cursor should move in whole pixels or not.","title":"is_pixel_perfect"},{"location":"the-engine-handbook/scripting-reference/PopochiuSettings/#dialog_style","text":"@export var dialog_style: int = 0 The style to use in dialog lines:[br][br] - [b]Above Character[/b]. Makes the text appear in top of each character. You can define the position of if using the [b]DialoPos[/b] node in the character's scene.[br] - [b]Portrait[/b]. Texts will appear in a panel located in the center of the game window accompanied by the avatar of the character who is speaking. You can define an avatar for each emotion with the [member PopochiuCharacter.avatars] property.[br] - [b]Caption[/b]. The texts will appear at the bottom of the game window (as if they were subtitles).","title":"dialog_style"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/","text":"PopochiuTransitionLayer Extends: Node2D Description Constants Descriptions FADE_IN FADE_IN = 1 FADE_IN_OUT FADE_IN_OUT = 0 FADE_OUT FADE_OUT = 2 PASS_DOWN_IN PASS_DOWN_IN = 4 PASS_DOWN_IN_OUT PASS_DOWN_IN_OUT = 3 PASS_DOWN_OUT PASS_DOWN_OUT = 5 Property Descriptions n var n: Dictionary Method Descriptions play_transition func play_transition(type: PopochiuTransitionLayer.<anonymous enum> = 1, duration: float = 1) -> void Signals signal transition_finished(transition_name):","title":"PopochiuTransitionLayer"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#popochiutransitionlayer","text":"Extends: Node2D","title":"PopochiuTransitionLayer"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#fade_in","text":"FADE_IN = 1","title":"FADE_IN"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#fade_in_out","text":"FADE_IN_OUT = 0","title":"FADE_IN_OUT"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#fade_out","text":"FADE_OUT = 2","title":"FADE_OUT"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#pass_down_in","text":"PASS_DOWN_IN = 4","title":"PASS_DOWN_IN"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#pass_down_in_out","text":"PASS_DOWN_IN_OUT = 3","title":"PASS_DOWN_IN_OUT"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#pass_down_out","text":"PASS_DOWN_OUT = 5","title":"PASS_DOWN_OUT"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#n","text":"var n: Dictionary","title":"n"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#play_transition","text":"func play_transition(type: PopochiuTransitionLayer.<anonymous enum> = 1, duration: float = 1) -> void","title":"play_transition"},{"location":"the-engine-handbook/scripting-reference/PopochiuTransitionLayer/#signals","text":"signal transition_finished(transition_name):","title":"Signals"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/","text":"PopochiuUtils Extends: Node Description Method Descriptions get_screen_coords_for (static) func get_screen_coords_for(node: Node) -> Vector2 Used by the graphic interface to get the position of a node in the scene in the transform space of the CanvasLayer where it is is rendered. get_random_array_element (static) func get_random_array_element(arr: Array) Gets a random element from an Array. get_random_array_idx (static) func get_random_array_idx(arr: Array) -> int Gets a random index from an Array. sort_by_file_name (static) func sort_by_file_name(a: String, b: String) -> bool Compares the name of two files a and b to check which one comes first in alphabetical order. override_font (static) func override_font(node: Control, font_name: String, font: Font) -> void Overrides the font with font_name in a Control node with the Font received in font . print_error (static) func print_error(msg: String) -> void Prints the text in msg with the error style for Popochiu. print_warning (static) func print_warning(msg: String) -> void Prints the text in msg with the warning style for Popochiu. print_normal (static) func print_normal(msg: String) -> void","title":"PopochiuUtils"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#popochiuutils","text":"Extends: Node","title":"PopochiuUtils"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#get_screen_coords_for-static","text":"func get_screen_coords_for(node: Node) -> Vector2 Used by the graphic interface to get the position of a node in the scene in the transform space of the CanvasLayer where it is is rendered.","title":"get_screen_coords_for (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#get_random_array_element-static","text":"func get_random_array_element(arr: Array) Gets a random element from an Array.","title":"get_random_array_element (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#get_random_array_idx-static","text":"func get_random_array_idx(arr: Array) -> int Gets a random index from an Array.","title":"get_random_array_idx (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#sort_by_file_name-static","text":"func sort_by_file_name(a: String, b: String) -> bool Compares the name of two files a and b to check which one comes first in alphabetical order.","title":"sort_by_file_name (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#override_font-static","text":"func override_font(node: Control, font_name: String, font: Font) -> void Overrides the font with font_name in a Control node with the Font received in font .","title":"override_font (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#print_error-static","text":"func print_error(msg: String) -> void Prints the text in msg with the error style for Popochiu.","title":"print_error (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#print_warning-static","text":"func print_warning(msg: String) -> void Prints the text in msg with the warning style for Popochiu.","title":"print_warning (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuUtils/#print_normal-static","text":"func print_normal(msg: String) -> void","title":"print_normal (static)"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/","text":"PopochiuWalkableArea Extends: Node2D Description Property Descriptions script_name @export var script_name: String = \"\" The identifier of the object used in scripts. description @export var description: String = \"\" Can be used to show the name of the area to players. enabled @export var enabled: bool = true Setter : @enabled_setter Whether the area is or not enabled. map_rid var map_rid: RID Property used by [PopochiuRoom]s to activate the map of this area in the [NavigationServer2D]. rid var rid: RID Used to assign a map in the [NavigationServer2D] to the region RID of the [b]$Perimeter[/b] child.","title":"PopochiuWalkableArea"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#popochiuwalkablearea","text":"Extends: Node2D","title":"PopochiuWalkableArea"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#script_name","text":"@export var script_name: String = \"\" The identifier of the object used in scripts.","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#description_1","text":"@export var description: String = \"\" Can be used to show the name of the area to players.","title":"description"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#enabled","text":"@export var enabled: bool = true Setter : @enabled_setter Whether the area is or not enabled.","title":"enabled"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#map_rid","text":"var map_rid: RID Property used by [PopochiuRoom]s to activate the map of this area in the [NavigationServer2D].","title":"map_rid"},{"location":"the-engine-handbook/scripting-reference/PopochiuWalkableArea/#rid","text":"var rid: RID Used to assign a map in the [NavigationServer2D] to the region RID of the [b]$Perimeter[/b] child.","title":"rid"},{"location":"the-engine-handbook/scripting-reference/audio_cue_container.gd/","text":"audio_cue_container.gd Extends: Resource Description","title":"Audio cue container.gd"},{"location":"the-engine-handbook/scripting-reference/audio_cue_container.gd/#audio_cue_containergd","text":"Extends: Resource","title":"audio_cue_container.gd"},{"location":"the-engine-handbook/scripting-reference/audio_cue_container.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/","text":"btn_dialog_auto.gd Property Descriptions btn_states @export var btn_states: Array states_descriptions @export var states_descriptions: Array Method Descriptions on_pressed func on_pressed() -> void get_description func get_description() -> String","title":"Btn dialog auto.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#btn_dialog_autogd","text":"","title":"btn_dialog_auto.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#btn_states","text":"@export var btn_states: Array","title":"btn_states"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#states_descriptions","text":"@export var states_descriptions: Array","title":"states_descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_auto.gd/#get_description","text":"func get_description() -> String","title":"get_description"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_history.gd/","text":"btn_dialog_history.gd Method Descriptions on_pressed func on_pressed() -> void","title":"Btn dialog history.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_history.gd/#btn_dialog_historygd","text":"","title":"btn_dialog_history.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_history.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_history.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/","text":"btn_dialog_speed.gd Property Descriptions btn_states @export var btn_states: Array states_descriptions @export var states_descriptions: Array Method Descriptions on_pressed func on_pressed() -> void get_description func get_description() -> String","title":"Btn dialog speed.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#btn_dialog_speedgd","text":"","title":"btn_dialog_speed.gd"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#btn_states","text":"@export var btn_states: Array","title":"btn_states"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#states_descriptions","text":"@export var states_descriptions: Array","title":"states_descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_dialog_speed.gd/#get_description","text":"func get_description() -> String","title":"get_description"},{"location":"the-engine-handbook/scripting-reference/btn_load.gd/","text":"btn_load.gd Method Descriptions on_pressed func on_pressed() -> void","title":"Btn load.gd"},{"location":"the-engine-handbook/scripting-reference/btn_load.gd/#btn_loadgd","text":"","title":"btn_load.gd"},{"location":"the-engine-handbook/scripting-reference/btn_load.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_load.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_quit.gd/","text":"btn_quit.gd Method Descriptions on_pressed func on_pressed() -> void","title":"Btn quit.gd"},{"location":"the-engine-handbook/scripting-reference/btn_quit.gd/#btn_quitgd","text":"","title":"btn_quit.gd"},{"location":"the-engine-handbook/scripting-reference/btn_quit.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_quit.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_save.gd/","text":"btn_save.gd Method Descriptions on_pressed func on_pressed() -> void","title":"Btn save.gd"},{"location":"the-engine-handbook/scripting-reference/btn_save.gd/#btn_savegd","text":"","title":"btn_save.gd"},{"location":"the-engine-handbook/scripting-reference/btn_save.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_save.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/btn_sound_settings.gd/","text":"btn_sound_settings.gd Method Descriptions on_pressed func on_pressed() -> void","title":"Btn sound settings.gd"},{"location":"the-engine-handbook/scripting-reference/btn_sound_settings.gd/#btn_sound_settingsgd","text":"","title":"btn_sound_settings.gd"},{"location":"the-engine-handbook/scripting-reference/btn_sound_settings.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/btn_sound_settings.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/","text":"cursor.gd Extends: CanvasLayer Description Constants Descriptions Type enum Type{NONE = 0, ACTIVE = 1, DOWN = 2, IDLE = 3, LEFT = 4, LOOK = 5, RIGHT = 6, SEARCH = 7, TALK = 8, UP = 9, USE = 10, WAIT = 11} Property Descriptions is_pixel_perfect @export var is_pixel_perfect: bool = false is_blocked var is_blocked: bool = false Method Descriptions show_cursor func show_cursor(anim_name: String = \"normal\", ignore_block: bool = false) -> void set_secondary_cursor_texture func set_secondary_cursor_texture(texture: Texture2D, ignore_block: bool = false) -> void remove_secondary_cursor_texture func remove_secondary_cursor_texture() -> void toggle_visibility func toggle_visibility(is_visible: bool) -> void block func block() -> void unblock func unblock() -> void scale_cursor func scale_cursor(factor: Vector2) -> void get_position func get_position() -> Vector2 replace_frames func replace_frames(new_node: AnimatedSprite2D) -> void hide_main_cursor func hide_main_cursor() -> void show_main_cursor func show_main_cursor() -> void hide_secondary_cursor func hide_secondary_cursor() -> void show_secondary_cursor func show_secondary_cursor() -> void get_type_name func get_type_name(idx: int) -> String","title":"Cursor.gd"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#cursorgd","text":"Extends: CanvasLayer","title":"cursor.gd"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#type","text":"enum Type{NONE = 0, ACTIVE = 1, DOWN = 2, IDLE = 3, LEFT = 4, LOOK = 5, RIGHT = 6, SEARCH = 7, TALK = 8, UP = 9, USE = 10, WAIT = 11}","title":"Type"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#is_pixel_perfect","text":"@export var is_pixel_perfect: bool = false","title":"is_pixel_perfect"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#is_blocked","text":"var is_blocked: bool = false","title":"is_blocked"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#show_cursor","text":"func show_cursor(anim_name: String = \"normal\", ignore_block: bool = false) -> void","title":"show_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#set_secondary_cursor_texture","text":"func set_secondary_cursor_texture(texture: Texture2D, ignore_block: bool = false) -> void","title":"set_secondary_cursor_texture"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#remove_secondary_cursor_texture","text":"func remove_secondary_cursor_texture() -> void","title":"remove_secondary_cursor_texture"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#toggle_visibility","text":"func toggle_visibility(is_visible: bool) -> void","title":"toggle_visibility"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#block","text":"func block() -> void","title":"block"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#unblock","text":"func unblock() -> void","title":"unblock"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#scale_cursor","text":"func scale_cursor(factor: Vector2) -> void","title":"scale_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#get_position","text":"func get_position() -> Vector2","title":"get_position"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#replace_frames","text":"func replace_frames(new_node: AnimatedSprite2D) -> void","title":"replace_frames"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#hide_main_cursor","text":"func hide_main_cursor() -> void","title":"hide_main_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#show_main_cursor","text":"func show_main_cursor() -> void","title":"show_main_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#hide_secondary_cursor","text":"func hide_secondary_cursor() -> void","title":"hide_secondary_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#show_secondary_cursor","text":"func show_secondary_cursor() -> void","title":"show_secondary_cursor"},{"location":"the-engine-handbook/scripting-reference/cursor.gd/#get_type_name","text":"func get_type_name(idx: int) -> String","title":"get_type_name"},{"location":"the-engine-handbook/scripting-reference/empty_script_template.gd/","text":"empty_script_template.gd","title":"Empty script template.gd"},{"location":"the-engine-handbook/scripting-reference/empty_script_template.gd/#empty_script_templategd","text":"","title":"empty_script_template.gd"},{"location":"the-engine-handbook/scripting-reference/importer_defaults.gd/","text":"importer_defaults.gd Constants Descriptions PIXEL_TEXTURES class importer_defaults.gd","title":"Importer defaults.gd"},{"location":"the-engine-handbook/scripting-reference/importer_defaults.gd/#importer_defaultsgd","text":"","title":"importer_defaults.gd"},{"location":"the-engine-handbook/scripting-reference/importer_defaults.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/importer_defaults.gd/#pixel_textures","text":"class importer_defaults.gd","title":"PIXEL_TEXTURES"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/","text":"input_actions.gd Constants Descriptions ACTIONS const ACTIONS: Array = [{\"button\":1,\"name\":\"popochiu-interact\"},{\"button\":2,\"name\":\"popochiu-look\"},{\"key\":4194305,\"name\":\"popochiu-skip\"}] INTERACT class input_actions.gd LOOK const LOOK: String = \"popochiu-look\" SKIP const SKIP: String = \"popochiu-skip\"","title":"Input actions.gd"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#input_actionsgd","text":"","title":"input_actions.gd"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#actions","text":"const ACTIONS: Array = [{\"button\":1,\"name\":\"popochiu-interact\"},{\"button\":2,\"name\":\"popochiu-look\"},{\"key\":4194305,\"name\":\"popochiu-skip\"}]","title":"ACTIONS"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#interact","text":"class input_actions.gd","title":"INTERACT"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#look","text":"const LOOK: String = \"popochiu-look\"","title":"LOOK"},{"location":"the-engine-handbook/scripting-reference/input_actions.gd/#skip","text":"const SKIP: String = \"popochiu-skip\"","title":"SKIP"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/","text":"settings_bar.gd Extends: PanelContainer Description Constants Descriptions ToolbarButton const ToolbarButton: res://addons/popochiu/engine/objects/graphic_interface/templates/simple_click/components/settings_bar/buttons/settings_bar_button.gd = preload(\"res://addons/popochiu/engine/objects/graphic_interface/templates/simple_click/components/settings_bar/buttons/settings_bar_button.gd\") Property Descriptions script_name @export var script_name: String = \"\" used_in_game @export var used_in_game: bool = true is_disabled var is_disabled: bool = false Method Descriptions is_open func is_open() -> bool","title":"Settings bar.gd"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#settings_bargd","text":"Extends: PanelContainer","title":"settings_bar.gd"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#toolbarbutton","text":"const ToolbarButton: res://addons/popochiu/engine/objects/graphic_interface/templates/simple_click/components/settings_bar/buttons/settings_bar_button.gd = preload(\"res://addons/popochiu/engine/objects/graphic_interface/templates/simple_click/components/settings_bar/buttons/settings_bar_button.gd\")","title":"ToolbarButton"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#script_name","text":"@export var script_name: String = \"\"","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#used_in_game","text":"@export var used_in_game: bool = true","title":"used_in_game"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#is_disabled","text":"var is_disabled: bool = false","title":"is_disabled"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/settings_bar.gd/#is_open","text":"func is_open() -> bool","title":"is_open"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/","text":"settings_bar_button.gd Extends: TextureButton Description Property Descriptions description @export var description: String = \"\" Getter : @description_getter script_name @export var script_name: String = \"\" Method Descriptions on_pressed func on_pressed() -> void on_mouse_entered func on_mouse_entered() -> void on_mouse_exited func on_mouse_exited() -> void get_description func get_description() -> String","title":"Settings bar button.gd"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#settings_bar_buttongd","text":"Extends: TextureButton","title":"settings_bar_button.gd"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#description_1","text":"@export var description: String = \"\" Getter : @description_getter","title":"description"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#script_name","text":"@export var script_name: String = \"\"","title":"script_name"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#on_pressed","text":"func on_pressed() -> void","title":"on_pressed"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#on_mouse_entered","text":"func on_mouse_entered() -> void","title":"on_mouse_entered"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#on_mouse_exited","text":"func on_mouse_exited() -> void","title":"on_mouse_exited"},{"location":"the-engine-handbook/scripting-reference/settings_bar_button.gd/#get_description","text":"func get_description() -> String","title":"get_description"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/","text":"sierra_bar.gd Extends: PanelContainer Description Property Descriptions score @export var score: int = 0 max_score @export var max_score: int = 100 lbl_game_name var lbl_game_name: Label lbl_score var lbl_score: Label Method Descriptions set_game_name func set_game_name(game_name: String) -> void reset_score func reset_score() -> void add_score func add_score(value: int) -> void subtract_score func subtract_score(value: int) -> void","title":"Sierra bar.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#sierra_bargd","text":"Extends: PanelContainer","title":"sierra_bar.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#score","text":"@export var score: int = 0","title":"score"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#max_score","text":"@export var max_score: int = 100","title":"max_score"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#lbl_game_name","text":"var lbl_game_name: Label","title":"lbl_game_name"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#lbl_score","text":"var lbl_score: Label","title":"lbl_score"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#set_game_name","text":"func set_game_name(game_name: String) -> void","title":"set_game_name"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#reset_score","text":"func reset_score() -> void","title":"reset_score"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#add_score","text":"func add_score(value: int) -> void","title":"add_score"},{"location":"the-engine-handbook/scripting-reference/sierra_bar.gd/#subtract_score","text":"func subtract_score(value: int) -> void","title":"subtract_score"},{"location":"the-engine-handbook/scripting-reference/sierra_commands_container.gd/","text":"sierra_commands_container.gd Extends: HBoxContainer Description","title":"Sierra commands container.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_commands_container.gd/#sierra_commands_containergd","text":"Extends: HBoxContainer","title":"sierra_commands_container.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_commands_container.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/","text":"sierra_menu.gd Extends: PanelContainer Description Property Descriptions inventory var inventory settings var settings help var help quit var quit","title":"Sierra menu.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#sierra_menugd","text":"Extends: PanelContainer","title":"sierra_menu.gd"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#inventory","text":"var inventory","title":"inventory"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#settings","text":"var settings","title":"settings"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#help","text":"var help","title":"help"},{"location":"the-engine-handbook/scripting-reference/sierra_menu.gd/#quit","text":"var quit","title":"quit"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/","text":"sound_volumes.gd Extends: GridContainer Description Constants Descriptions MIN_VOLUME const MIN_VOLUME: int = -30 MUTE_VOLUME const MUTE_VOLUME: int = -70 Property Descriptions dflt_volumes var dflt_volumes: Dictionary Method Descriptions update_sliders func update_sliders() -> void restore_last_volumes func restore_last_volumes() -> void","title":"Sound volumes.gd"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#sound_volumesgd","text":"Extends: GridContainer","title":"sound_volumes.gd"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#min_volume","text":"const MIN_VOLUME: int = -30","title":"MIN_VOLUME"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#mute_volume","text":"const MUTE_VOLUME: int = -70","title":"MUTE_VOLUME"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#property-descriptions","text":"","title":"Property Descriptions"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#dflt_volumes","text":"var dflt_volumes: Dictionary","title":"dflt_volumes"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#update_sliders","text":"func update_sliders() -> void","title":"update_sliders"},{"location":"the-engine-handbook/scripting-reference/sound_volumes.gd/#restore_last_volumes","text":"func restore_last_volumes() -> void","title":"restore_last_volumes"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/","text":"system_text.gd Extends: RichTextLabel Description Constants Descriptions DFLT_SIZE const DFLT_SIZE: String = \"dflt_size\" Method Descriptions appear func appear() -> void close func close() -> void Signals signal shown():","title":"System text.gd"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#system_textgd","text":"Extends: RichTextLabel","title":"system_text.gd"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#description","text":"","title":"Description"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#constants-descriptions","text":"","title":"Constants Descriptions"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#dflt_size","text":"const DFLT_SIZE: String = \"dflt_size\"","title":"DFLT_SIZE"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#method-descriptions","text":"","title":"Method Descriptions"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#appear","text":"func appear() -> void","title":"appear"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#close","text":"func close() -> void","title":"close"},{"location":"the-engine-handbook/scripting-reference/system_text.gd/#signals","text":"signal shown():","title":"Signals"}]}